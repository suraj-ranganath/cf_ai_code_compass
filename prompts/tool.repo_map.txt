Tool: get_repo_map
Purpose: Analyze a GitHub repository to extract its structure, key files, code hotspots, and prerequisite concepts.

## Input Parameters
- repoUrl (required): The GitHub repository URL to analyze
- depth (optional): How deep to analyze (1-3, default 2)
  - 1: Basic structure only (file tree, README)
  - 2: Key files + dependencies + patterns
  - 3: Deep analysis with code relationships

## Analysis Strategy

### 1. File Structure Extraction
- Fetch the complete repository tree via GitHub API
- Calculate importance scores for each file based on:
  - File type (source code > config > tests)
  - Location (src/, lib/ > root > misc/)
  - Size (moderate files often most important)
  - Name patterns (README, main, index, app, core)
  - Modification frequency (if available)

### 2. Hotspot Identification
Identify "code hotspots" - areas requiring deep understanding:
- Entry points (main.*, index.*, app.*)
- Core abstractions (base classes, interfaces, protocols)
- Configuration files (package.json, requirements.txt, Cargo.toml)
- Architectural files (README, ARCHITECTURE, CONTRIBUTING)
- High-centrality modules (imported by many other files)

### 3. Prerequisite Concept Extraction
Analyze files to identify required knowledge:
- **From file extensions**: .ts → TypeScript, .py → Python, .rs → Rust
- **From dependencies**: package.json, requirements.txt, go.mod
- **From imports**: React, Express, Django, Tokio, etc.
- **From patterns**: OOP, functional, async, event-driven
- **From architecture**: MVC, microservices, monorepo, etc.

For each prerequisite, provide:
- Concept name
- Brief description
- External documentation links
- Estimated difficulty level (beginner/intermediate/advanced)

### 4. Primer Generation
Create a 3-5 paragraph repository "primer" covering:
- **Paragraph 1**: Project purpose and domain
- **Paragraph 2**: Technology stack and architecture
- **Paragraph 3**: Key modules and their responsibilities
- **Paragraph 4**: Development workflow and conventions
- **Paragraph 5**: How to navigate for the user's specific goal

Estimated read time: ~2 minutes

## Output Format

Return a JSON object:

```json
{
  "repoName": "owner/repo",
  "structure": [
    {
      "path": "src/main.ts",
      "type": "file",
      "size": 1234,
      "language": "TypeScript",
      "importance": 0.95
    }
  ],
  "hotspots": [
    {
      "file": "src/auth/index.ts",
      "lineStart": 1,
      "lineEnd": 50,
      "description": "Authentication entry point",
      "importance": 0.9,
      "concepts": ["JWT", "OAuth", "Middleware"]
    }
  ],
  "prerequisites": [
    {
      "concept": "TypeScript",
      "description": "Typed superset of JavaScript",
      "externalLinks": ["https://www.typescriptlang.org/docs/"],
      "difficulty": "beginner"
    }
  ],
  "primer": "This repository implements...",
  "estimatedReadTime": 2
}
```

## Error Handling
- If repository is private and no token provided: Request GitHub token
- If repository doesn't exist: Suggest checking URL
- If repository is too large (>10,000 files): Analyze top-level structure only
- If rate limited: Cache results and retry with exponential backoff

## Optimization Notes
- Cache repository trees in R2 for 24 hours
- Store file embeddings in Vectorize for semantic search
- Prioritize files modified recently (if analyzing active development)
